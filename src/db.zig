const std = @import("std");

pub const Db = struct {
    file: std.fs.File,

    pub fn init(filename: []const u8) !Db {
        const file = try std.fs.cwd().createFile(
            filename,
            .{ .read = true, .truncate = true },
        );
        errdefer file.close();

        const header = [_]u8{
            // 0x00-0x0F: Magic header
            0x53, 0x51, 0x4C, 0x69, 0x74, 0x65, 0x20, 0x66,
            0x6F, 0x72, 0x6D, 0x61, 0x74, 0x20, 0x33, 0x00,
            // 0x10-0x17: Page size and settings
            0x10, 0x00, 0x01, 0x01, 0x0c, 0x40, 0x20, 0x20,
            // 0x18-0x5F: Database settings
            0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
        };

        // Start of page 1 after header (0x60 onwards)
        const page1 = [_]u8{
            0x00, 0x2e, 0x6e, 0xba, 0x0d, 0x00, 0x00, 0x00,
            0x00, 0x0f, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00,
        };

        try file.writeAll(&header);
        try file.writeAll(&page1);

        // Fill rest with zeros
        var remaining: usize = 4096 - (header.len + page1.len);
        const zeros = [_]u8{0} ** 100;
        while (remaining > 0) {
            const to_write = @min(remaining, zeros.len);
            try file.writeAll(zeros[0..to_write]);
            remaining -= to_write;
        }

        return Db{
            .file = file,
        };
    }

    pub fn deinit(self: *Db) void {
        self.file.close();
    }
};

pub const DbInfo = {};
pub const SchemaEntry = {};
pub const ColumnDef = {};
pub const PageHeader = {};
pub const TableRecord = {};
pub const TableRawRecord = {};
pub const InteriorTableEntry = {};
pub const InteriorIndexEntry = {};